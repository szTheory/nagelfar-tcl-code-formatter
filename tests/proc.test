#------------------------------------------------------------*- tcl -*-
# Procedure tests for Nagelfar
#----------------------------------------------------------------------
# $Revision$
#----------------------------------------------------------------------

test proc-1.1 {
    Procedure checking
} -body {
    createTestFile {
        proc info {apa} {
            return $apa
        }
        info hejsan
    }
    execTestFile
} -result {%%Line   2: W Procedure "info" does not match previous definition*}\
        -match glob

test proc-1.2 {
    Procedure checking
} -body {
    createTestFile {
        proc hej {a b c} {
            return $a
        }
        set x 1
        set y 2
        set z 3
        hej $x $y $z
    }
    execTestFile
} -result {%%}

test proc-1.3 {
    Procedure checking, "wrong order"
} -body {
    createTestFile {
        proc hej {a b c} {
            return [hopp apa bepa cepa]
        }
        proc hopp {a b} {
            return $a
        }
    }
    execTestFile -flags -2pass
} -result {%%Line   3: E Wrong number of arguments (3) to "hopp"}


test proc-2.1 {
    Procedure checking, detecting upvar
} -body {
    createTestFile {
        proc hej {a b c} {
            upvar $b apa
            return $apa
        }
        set x 1
        set y 2
        set z 3
        hej $x $y $z
    }
    execTestFile
} -result {%%Line   9: N Suspicious variable name "$y"}

test proc-2.2 {
    Procedure checking, detecting upvar
} -body {
    createTestFile {
        proc hej {a b c} {
            upvar $a apa
            return $apa
        }
        set y 2
        set z 3
        hej x $y $z
    }
    execTestFile
} -result {%%Line   8: E Unknown variable "x"}

test proc-2.3 {
    Procedure checking, detecting upvar
} -body {
    createTestFile {
        proc hej {a b c} {
            upvar $c apa
            set apa 1
        }
        set y 2
        set z 3
        hej $y $z x
        list $x
    }
    execTestFile
} -result {%%}

test proc-2.4 {
    Procedure checking, detecting upvar
} -body {
    createTestFile {
        proc hej {a b c} {
            upvar "#0" $a apa $b bepa
            set cepa $apa
            set depa $bepa
        }
        set y 2
        #set z 3
        hej y z x
    }
    execTestFile
} -result {%%}

test proc-2.5 {
    Procedure checking, detecting upvar
} -body {
    createTestFile {
        proc hej {a &b cName} {
            upvar $a apa
            upvar ${&b} b
            upvar ${cName} c
            list $apa $b $c
        }
        set x 1
        set y 2
        set z 3
        hej x y z
    }
    execTestFile
} -result {%%}

test proc-3.1 {
    Procedure, sanity checking args
} -body {
    createTestFile {
        proc apa {args hej} {
            return $hej
        }
    }
    execTestFile
} -result {%%Line   2: N Argument 'args' used before last, which can be confusing}

test proc-3.2 {
    Procedure, sanity checking args
} -body {
    createTestFile {
        proc apa {hej x hej} {
            return $hej
        }
    }
    execTestFile
} -result {%%Line   2: N Duplicate proc arguments}

test proc-3.3 {
    Procedure, sanity checking args
} -body {
    createTestFile {
        proc apa {hej {x y} hopp happ} {
            return $hej
        }
    }
    execTestFile
} -result {%%Line   2: N Non-default arg after default arg}

test proc-3.4 {
    Procedure, sanity checking args
} -body {
    createTestFile {
        proc apa {hej {}hopp} {
            return
        }
    }
    execTestFile
} -result {%%Line   2: E Argument list is not a valid list}

test proc-4.1 {
    Procedure checking, updated syntax def
} -body {
    createTestFile {
        ##nagelfar syntax xx dm
        proc xx {name arg body} {
            return $body
        }
    }
    execTestFile
} -result {%%}

test proc-5.1 {
    Procedure, check single use name
} -body {
    createTestFile {
        proc p1 {} {
	    set a "Hello"
	    set b "you"
	    return $b
        }
	proc p2 {para} {
	    return ""
        }

    }
    execTestFile -flags {-Wunusedvar}
} -result {%%Line   2: W Variable "a" is never read
Line   7: W Variable "para" is never read}

test proc-5.2 {
    Procedure, check single use name
} -body {
    createTestFile {
	namespace eval test {
	    variable val
	    proc init {} {
		variable val "test"
	    }
	    proc run {} {
		variable val2
		puts "test"
	    }
	}
    }
    execTestFile -flags {-Wunusedvar}
} -result {%%Line   7: W Variable "val2" is never read}

test proc-5.3 {
    Procedure, check single use name
} -body {
    createTestFile {
	set g "a"
	proc init {} {
	    puts "$::g"
	}
	proc run {dummy} {
	}
    }
    execTestFile -flags {-Wunusedvar} -WunusedvarFilter dummy
} -result {%%}

test proc-5.4 {
    Procedure, check single use name
} -body {
    createTestFile {
	proc init {} {
	    global g
	}
	proc run {} {
	    global g
	    array get g
	}
    }
    execTestFile -flags {-Wunusedvar}
} -result {%%Line   2: W Variable "g" is never read}

test proc-5.5 {
    Detect set as read
} -body {
    createTestFile {
	proc run {} {
	    set a "value"
	    set a
	}
    }
    execTestFile -flags {-Wunusedvar}
} -result {%%}

test proc-5.6 {
    Supress with inline comment
} -body {
    createTestFile {
	proc run {} {
	    set a "value"
	    ##nagelfar varused a
	}
	proc run2 {} {
	    set b "value"
	}
    }
    execTestFile -flags {-Wunusedvar}
} -result {%%Line   6: W Variable "b" is never read}

test proc-5.7 {
    Set global value ok
} -body {
    createTestFile {
	proc run {} {
	    global a
	    set a "value"
	}
	proc run2 {} {
	    global a
	}
    }
    execTestFile -flags {-Wunusedvar}
} -result {%%Line   6: W Variable "a" is never read}

test proc-5.8 {
    Global array
} -body {
    createTestFile {
	proc run {} {
	    global a
	    set a(x) "value"
	}
	proc run {} {
	    global a
	    puts $a(x)
	}

    }
    execTestFile -flags {-Wunusedvar}
} -result {%%}

test proc-5.9 {
    info exists array
} -body {
    createTestFile {
	proc run {} {
	    global a
	    info exists a(x)
	}
    }
    execTestFile -flags {-Wunusedvar}
} -result {%%}

test proc-5.11 {
    combination with oo::define
} -body {
    createTestFile {
	::oo::class create myclass {
	    variable a
	    method run1 {} {
		set x 23
		puts "run2"
	    }
	}
    }
    execTestFile -flags {-Wunusedvar}

} -result {%%Line   4: W Variable "x" is never read}
