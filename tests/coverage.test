#------------------------------------------------------------*- tcl -*-
# Tests for code coverage instrumentation
#----------------------------------------------------------------------
# $Revision$
#----------------------------------------------------------------------

test coverage-1.1 {
    Simple test case
} -body {
    createTestFile {
        set apa [list hej hopp]
        proc x {y z} {
            set apa [list hej hopp]
            if {$y} {
                puts $z
                set apa [list hej hopp]
            }
            if {$z} break
        }
    }
    execTestFileInstrument
} -result [list {%%Writing file _testfile__i} 9 9 8 5 3 3 5 8 9 9]

test coverage-1.2 {
    Simple test case, with pragma
} -body {
    createTestFile {
        set apa [list hej hopp]
        proc x {y z} {
            set apa [list hej hopp]
            if {$y} { ##nagelfar nocover
                puts $z
                set apa [list hej hopp]
            }
            if {$z} break
            switch $y {
                1 {
                    set x y
                }
                default { ##nagelfar nocover
                    set x y
                }
            }
        }
    }
    execTestFileInstrument
} -result [list {%%Writing file _testfile__i} 11 9 9 8 3 3 8 9 9 11]

test coverage-2.1 {
    Multiple files
} -body {
    createTestFile {
        proc x1 {y z} {
            if {$y} {# Should be able to handle a comment here
                set hej 1
            };# Should be able to handle a comment here
            if {$z} {
                set hej 1
            }
        }
    }
    file rename _testfile_ _testfile_1
    createTestFile {
        proc x2 {y z} {
            if {$y} {# Should be able to handle a comment here
                set hej 1
            };# Should be able to handle a comment here
            if {$z} {
                set hej 1
            }
       }
    }
    file rename _testfile_ _testfile_2
    execTestFile -flags -instrument -fn _testfile_1
    execTestFile -flags -instrument -fn _testfile_2

    interp create apa
    apa eval source _testfile_1_i
    apa eval source _testfile_2_i
    apa eval x1 1 0
    apa eval x2 0 1
    apa eval ::_instrument_::cleanup
    interp delete apa

    interp create apa
    apa eval [list namespace eval ::_instrument_ {}]
    apa eval source _testfile_1_log
    apa eval source _testfile_2_log
    set items [apa eval array get ::_instrument_::log]
    interp delete apa

    set res {}
    foreach {item val} $items {
        lappend res [list [file tail $item] $val]
    }
    lsort -dictionary -index 0 $res
} -result {{_testfile_1,2 1} {_testfile_1,3 1} {_testfile_1,5 0} {_testfile_1,6 0} {_testfile_1,8 1} {_testfile_2,2 1} {_testfile_2,3 0} {_testfile_2,5 1} {_testfile_2,6 1} {_testfile_2,8 0}} -cleanup {
    file delete _testfile_1_i _testfile_1
    file delete _testfile_2_i _testfile_2
    file delete _testfile_1_log _testfile_2_log
}

test coverage-2.2 {
    Multiple files, multiple runs
} -body {
    createTestFile {
        proc x1 {y z} {
            if {$y} {# Should be able to handle a comment here
                set hej 1
            };# Should be able to handle a comment here
            if {$z} {
                set hej 1
            }
            ##nagelfar cover variable y
        }
    }
    file rename _testfile_ _testfile_1
    createTestFile {
        proc x2 {y z} {
            if {$y} {# Should be able to handle a comment here
                set hej 1
            };# Should be able to handle a comment here
            if {$z} {
                set hej 1
            }
       }
    }
    file rename _testfile_ _testfile_2
    execTestFile -flags -instrument -fn _testfile_1
    execTestFile -flags -instrument -fn _testfile_2

    interp create apa
    apa eval source _testfile_1_i
    apa eval source _testfile_2_i
    apa eval x1 1 0
    apa eval x2 0 1
    apa eval ::_instrument_::cleanup
    interp delete apa

    interp create apa
    apa eval source _testfile_1_i
    apa eval source _testfile_2_i
    apa eval x1 1 0
    # Cope with sourcing file twice
    apa eval source _testfile_1_i
    apa eval x1 0 1
    apa eval x2 0 1
    apa eval ::_instrument_::cleanup
    interp delete apa

    interp create apa
    apa eval [list namespace eval ::_instrument_ {}]
    apa eval source _testfile_1_log
    apa eval source _testfile_2_log
    set items [apa eval array get ::_instrument_::log]
    interp delete apa

    set res {}
    foreach {item val} $items {
        lappend res [list [file tail $item] $val]
    }
    lsort -dictionary -index 0 $res
} -result {{_testfile_1,2 3} {_testfile_1,3 2} {_testfile_1,5 1} {_testfile_1,6 1} {_testfile_1,8 2} {_testfile_1,9,var {1 0 1}} {_testfile_2,2 2} {_testfile_2,3 0} {_testfile_2,5 2} {_testfile_2,6 2} {_testfile_2,8 0}} -cleanup {
    file delete _testfile_1_i _testfile_1
    file delete _testfile_2_i _testfile_2
    file delete _testfile_1_log _testfile_2_log
}

test coverage-3.1 {
    Repeated instrumenting
} -body {
    createTestFile {# header lines
        # more header lines
        set apa [list hej hopp]
    }
    set res [list [execTestFile -flags -instrument]]
    file rename -force _testfile__i _testfile_
    lappend res [execTestFile -flags -instrument]

    interp create apa
    apa eval source _testfile__i
    apa eval ::_instrument_::cleanup
    interp delete apa

    lappend res [execTestFile -flags -markup]
    file delete _testfile__i
    file delete _testfile__log
    set res
    # Note: the coverage statistics in the result depends in the contents
    # of instrumentation prolog code, any change there can affect the numbers.
} -match glob -result [list \
        {%%Writing file _testfile__i} \
        {%%Warning: Instrumenting already instrumented file _testfile_
Writing file _testfile__i} \
        {Writing file _testfile__m (*/* *%)
File _testfile_ is instrumented, aborting markup}]

test coverage-4.1 {
    Variable coverage
} -body {
    createTestFile {
        set apa [list hej hopp]
        ##nagelfar cover variable apa
    }
    set res [list [execTestFile -flags -instrument]]
    set ch [open _testfile__i r]
    set data [read $ch]
    close $ch
    file delete _testfile__i
    set data
} -match glob -result {*lappend ::_instrument_::log(*/_testfile_,3,var) $apa*}

test coverage-5.1 {
    Code in OO blocks
} -body {
    createTestFile {
        ##nagelfar syntax _obj,x s x*
        ##nagelfar subcmd _obj,x dostuff
        ##nagelfar syntax _obj,x\ dostuff c

        ##nagelfar syntax x x(_obj,x) x(_obj,x)
        proc x {y z} {
            $y dostuff {
                set apa [list hej hopp]
            }
            $z dostuff {
                set bepa $apa
            }
        }
    }
    execTestFileInstrument
} -result [list {%%Writing file _testfile__i} 11 8 7 7 8 11]

test coverage-6.1 {
    Side effects
} -body {
    createTestFile {
        proc Xx {a} {
            if {$a} {
                return y
            }
            # Implicit return of empty string here
        }
    }
    set res [list [execTestFile -flags -instrument]]

    interp create apa
    apa eval source _testfile__i
    lappend res [apa eval Xx 0] [apa eval Xx 1]
    apa eval ::_instrument_::cleanup
    interp delete apa

    file delete _testfile__i
    file delete _testfile__log
    set res
} -result [list {%%Writing file _testfile__i} "" y]

test coverage-7.1 {
    idir option, error
} -body {
    createTestFile {
        set apa [list hej hopp]
    }
    execTestFile -flags "-idir x"
} -match glob -result {*Option -idir can only be used*}

test coverage-7.2 {
    idir option
} -body {
    createTestFile {
        set apa [list hej hopp]
        proc x {y z} {
            set apa [list hej hopp]
            if {$y} {
                puts $z
                set apa [list hej hopp]
            }
            if {$z} break
        }
    }
    set idir [tcltest::makeDirectory _tdir_]
    set res {}
    lappend res [execTestFile -flags "-idir $idir -instrument"]
    lappend res [lsort [glob -dir $idir -tails *]]

    interp create apa
    apa eval source $idir/_testfile__i
    apa eval ::_instrument_::cleanup
    interp delete apa
    lappend res [lsort [glob -dir $idir -tails *]]

    lappend res [execTestFile -flags "-markup -idir $idir"]
    lappend res [lsort [glob -dir $idir -tails *]]

    tcltest::removeDirectory _tdir_
    set res
} -match glob -result [list {%%Writing file */_tdir_/_testfile__i} \
                               {_testfile__i} \
                               {_testfile__i _testfile__log} \
                               {Writing file */_tdir_/_testfile__m (*)} \
                               {_testfile__i _testfile__log _testfile__m}]
test coverage-8.1 {
    Nocover, should cover all subblocks
} -body {
    createTestFile {
        set apa [list hej hopp]
        proc x {y z} {
            set apa [list hej hopp]
            if {$y} { ##nagelfar nocover
                puts $z
                if {$z} {
                    set apa [list hej hopp]
                } else {
                    set apa [list hej hopp]
                }
            }   ;# The implicit else should still be covered, for statistics
            if {$z} break
            switch $y {
                1 {
                    if {$x} {
                        set x y
                    }
                }
                default { ##nagelfar nocover
                    set x y
                    if {$x} {
                        list y
                    }
                }
            }
        }
    }
    execTestFileInstrument
} -result [list {%%Writing file _testfile__i} 18 16 15 13 13 12 3 3 12 13 13 15 16 18]
